<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.lol.common.mapper.ds1.PayDrawmoneyMapper" >
  <resultMap id="BaseResultMap" type="com.lol.common.model.ds1.PayDrawmoney" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="cust_id" property="custId" jdbcType="BIGINT" />
    <result column="money" property="money" jdbcType="INTEGER" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="actual_money" property="actualMoney" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="account_name" property="accountName" jdbcType="VARCHAR" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="pay_type" property="payType" jdbcType="INTEGER" />
    <result column="finish_date" property="finishDate" jdbcType="TIMESTAMP" />
    <result column="pay_fee" property="payFee" jdbcType="INTEGER" />
    <result column="cur_balance" property="curBalance" jdbcType="INTEGER" />
    <result column="bank_name" property="bankName" jdbcType="VARCHAR" />
    <result column="bank_type" property="bankType" jdbcType="VARCHAR" />
    <result column="bank_city" property="bankCity" jdbcType="VARCHAR" />
    <result column="bank_province" property="bankProvince" jdbcType="VARCHAR" />
    <result column="finish_user" property="finishUser" jdbcType="VARCHAR" />
    <result column="account_type" property="accountType" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, cust_id, money, create_date, user_id, actual_money, account, account_name, remark, 
    status, pay_type, finish_date, pay_fee, cur_balance, bank_name, bank_type, bank_city, 
    bank_province, finish_user, account_type
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.lol.common.model.ds1.PayDrawmoneyExample" >
    <include refid="pagePrefix" />
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from pay_drawmoney
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <include refid="pageSuffix" />
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from pay_drawmoney
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from pay_drawmoney
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.lol.common.model.ds1.PayDrawmoneyExample" >
    delete from pay_drawmoney
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.lol.common.model.ds1.PayDrawmoney" >
    insert into pay_drawmoney (id, cust_id, money, 
      create_date, user_id, actual_money, 
      account, account_name, remark, 
      status, pay_type, finish_date, 
      pay_fee, cur_balance, bank_name, 
      bank_type, bank_city, bank_province, 
      finish_user, account_type)
    values (#{id,jdbcType=INTEGER}, #{custId,jdbcType=BIGINT}, #{money,jdbcType=INTEGER}, 
      #{createDate,jdbcType=TIMESTAMP}, #{userId,jdbcType=VARCHAR}, #{actualMoney,jdbcType=INTEGER}, 
      #{account,jdbcType=VARCHAR}, #{accountName,jdbcType=VARCHAR}, #{remark,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{payType,jdbcType=INTEGER}, #{finishDate,jdbcType=TIMESTAMP}, 
      #{payFee,jdbcType=INTEGER}, #{curBalance,jdbcType=INTEGER}, #{bankName,jdbcType=VARCHAR}, 
      #{bankType,jdbcType=VARCHAR}, #{bankCity,jdbcType=VARCHAR}, #{bankProvince,jdbcType=VARCHAR}, 
      #{finishUser,jdbcType=VARCHAR}, #{accountType,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.lol.common.model.ds1.PayDrawmoney" >
    insert into pay_drawmoney
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="custId != null" >
        cust_id,
      </if>
      <if test="money != null" >
        money,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="actualMoney != null" >
        actual_money,
      </if>
      <if test="account != null" >
        account,
      </if>
      <if test="accountName != null" >
        account_name,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="payType != null" >
        pay_type,
      </if>
      <if test="finishDate != null" >
        finish_date,
      </if>
      <if test="payFee != null" >
        pay_fee,
      </if>
      <if test="curBalance != null" >
        cur_balance,
      </if>
      <if test="bankName != null" >
        bank_name,
      </if>
      <if test="bankType != null" >
        bank_type,
      </if>
      <if test="bankCity != null" >
        bank_city,
      </if>
      <if test="bankProvince != null" >
        bank_province,
      </if>
      <if test="finishUser != null" >
        finish_user,
      </if>
      <if test="accountType != null" >
        account_type,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="custId != null" >
        #{custId,jdbcType=BIGINT},
      </if>
      <if test="money != null" >
        #{money,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="actualMoney != null" >
        #{actualMoney,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="accountName != null" >
        #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="payType != null" >
        #{payType,jdbcType=INTEGER},
      </if>
      <if test="finishDate != null" >
        #{finishDate,jdbcType=TIMESTAMP},
      </if>
      <if test="payFee != null" >
        #{payFee,jdbcType=INTEGER},
      </if>
      <if test="curBalance != null" >
        #{curBalance,jdbcType=INTEGER},
      </if>
      <if test="bankName != null" >
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankType != null" >
        #{bankType,jdbcType=VARCHAR},
      </if>
      <if test="bankCity != null" >
        #{bankCity,jdbcType=VARCHAR},
      </if>
      <if test="bankProvince != null" >
        #{bankProvince,jdbcType=VARCHAR},
      </if>
      <if test="finishUser != null" >
        #{finishUser,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null" >
        #{accountType,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.lol.common.model.ds1.PayDrawmoneyExample" resultType="java.lang.Integer" >
    select count(*) from pay_drawmoney
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update pay_drawmoney
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.custId != null" >
        cust_id = #{record.custId,jdbcType=BIGINT},
      </if>
      <if test="record.money != null" >
        money = #{record.money,jdbcType=INTEGER},
      </if>
      <if test="record.createDate != null" >
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=VARCHAR},
      </if>
      <if test="record.actualMoney != null" >
        actual_money = #{record.actualMoney,jdbcType=INTEGER},
      </if>
      <if test="record.account != null" >
        account = #{record.account,jdbcType=VARCHAR},
      </if>
      <if test="record.accountName != null" >
        account_name = #{record.accountName,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.payType != null" >
        pay_type = #{record.payType,jdbcType=INTEGER},
      </if>
      <if test="record.finishDate != null" >
        finish_date = #{record.finishDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.payFee != null" >
        pay_fee = #{record.payFee,jdbcType=INTEGER},
      </if>
      <if test="record.curBalance != null" >
        cur_balance = #{record.curBalance,jdbcType=INTEGER},
      </if>
      <if test="record.bankName != null" >
        bank_name = #{record.bankName,jdbcType=VARCHAR},
      </if>
      <if test="record.bankType != null" >
        bank_type = #{record.bankType,jdbcType=VARCHAR},
      </if>
      <if test="record.bankCity != null" >
        bank_city = #{record.bankCity,jdbcType=VARCHAR},
      </if>
      <if test="record.bankProvince != null" >
        bank_province = #{record.bankProvince,jdbcType=VARCHAR},
      </if>
      <if test="record.finishUser != null" >
        finish_user = #{record.finishUser,jdbcType=VARCHAR},
      </if>
      <if test="record.accountType != null" >
        account_type = #{record.accountType,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update pay_drawmoney
    set id = #{record.id,jdbcType=INTEGER},
      cust_id = #{record.custId,jdbcType=BIGINT},
      money = #{record.money,jdbcType=INTEGER},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      user_id = #{record.userId,jdbcType=VARCHAR},
      actual_money = #{record.actualMoney,jdbcType=INTEGER},
      account = #{record.account,jdbcType=VARCHAR},
      account_name = #{record.accountName,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      pay_type = #{record.payType,jdbcType=INTEGER},
      finish_date = #{record.finishDate,jdbcType=TIMESTAMP},
      pay_fee = #{record.payFee,jdbcType=INTEGER},
      cur_balance = #{record.curBalance,jdbcType=INTEGER},
      bank_name = #{record.bankName,jdbcType=VARCHAR},
      bank_type = #{record.bankType,jdbcType=VARCHAR},
      bank_city = #{record.bankCity,jdbcType=VARCHAR},
      bank_province = #{record.bankProvince,jdbcType=VARCHAR},
      finish_user = #{record.finishUser,jdbcType=VARCHAR},
      account_type = #{record.accountType,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.lol.common.model.ds1.PayDrawmoney" >
    update pay_drawmoney
    <set >
      <if test="custId != null" >
        cust_id = #{custId,jdbcType=BIGINT},
      </if>
      <if test="money != null" >
        money = #{money,jdbcType=INTEGER},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="actualMoney != null" >
        actual_money = #{actualMoney,jdbcType=INTEGER},
      </if>
      <if test="account != null" >
        account = #{account,jdbcType=VARCHAR},
      </if>
      <if test="accountName != null" >
        account_name = #{accountName,jdbcType=VARCHAR},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="payType != null" >
        pay_type = #{payType,jdbcType=INTEGER},
      </if>
      <if test="finishDate != null" >
        finish_date = #{finishDate,jdbcType=TIMESTAMP},
      </if>
      <if test="payFee != null" >
        pay_fee = #{payFee,jdbcType=INTEGER},
      </if>
      <if test="curBalance != null" >
        cur_balance = #{curBalance,jdbcType=INTEGER},
      </if>
      <if test="bankName != null" >
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="bankType != null" >
        bank_type = #{bankType,jdbcType=VARCHAR},
      </if>
      <if test="bankCity != null" >
        bank_city = #{bankCity,jdbcType=VARCHAR},
      </if>
      <if test="bankProvince != null" >
        bank_province = #{bankProvince,jdbcType=VARCHAR},
      </if>
      <if test="finishUser != null" >
        finish_user = #{finishUser,jdbcType=VARCHAR},
      </if>
      <if test="accountType != null" >
        account_type = #{accountType,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.lol.common.model.ds1.PayDrawmoney" >
    update pay_drawmoney
    set cust_id = #{custId,jdbcType=BIGINT},
      money = #{money,jdbcType=INTEGER},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      user_id = #{userId,jdbcType=VARCHAR},
      actual_money = #{actualMoney,jdbcType=INTEGER},
      account = #{account,jdbcType=VARCHAR},
      account_name = #{accountName,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      pay_type = #{payType,jdbcType=INTEGER},
      finish_date = #{finishDate,jdbcType=TIMESTAMP},
      pay_fee = #{payFee,jdbcType=INTEGER},
      cur_balance = #{curBalance,jdbcType=INTEGER},
      bank_name = #{bankName,jdbcType=VARCHAR},
      bank_type = #{bankType,jdbcType=VARCHAR},
      bank_city = #{bankCity,jdbcType=VARCHAR},
      bank_province = #{bankProvince,jdbcType=VARCHAR},
      finish_user = #{finishUser,jdbcType=VARCHAR},
      account_type = #{accountType,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <sql id="pagePrefix" >
    <if test="page != null" >
      <if test="dialect == 'oracle'" >
        select * from ( select row_.*, rownum rownum_ from ( 
      </if>
    </if>
  </sql>
  <sql id="pageSuffix" >
    <if test="page != null" >
      <if test="dialect == 'oracle'" >
        <![CDATA[ ) row_ ) where rownum_ > #{page.start} and rownum_ <= (#{page.start} + #{page.limit}) ]]>
      </if>
      <if test="dialect == 'mysql'" >
        limit #{page.start} , #{page.limit}
      </if>
    </if>
  </sql>
</mapper>